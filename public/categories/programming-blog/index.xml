<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming-blog on Amir personal website</title>
    <link>https://example.com/categories/programming-blog/</link>
    <description>Recent content in programming-blog on Amir personal website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2023, Amir Hesamian</copyright>
    <lastBuildDate>Sat, 09 Jun 2018 23:16:11 -0600</lastBuildDate><atom:link href="https://example.com/categories/programming-blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic-type-builder C# library</title>
      <link>https://example.com/post/old/programming/2018-06-10-typebuilder/</link>
      <pubDate>Sat, 09 Jun 2018 23:16:11 -0600</pubDate>
      
      <guid>https://example.com/post/old/programming/2018-06-10-typebuilder/</guid>
      <description>I really wanted to create a type on the fly by extending an existing type and then add some extra properties to it. Thanks to System.Reflection.Emit written by Mono team it is possible to achieve this in dotnet core. This package comes with a TypeBuilder class but using it is really not a straightforward thing to do. Hence I created this small library to do the job (repo url with nuget package too).</description>
    </item>
    
    <item>
      <title>Local-date C# library</title>
      <link>https://example.com/post/old/programming/2018-06-10-localdate/</link>
      <pubDate>Sat, 09 Jun 2018 23:16:11 -0600</pubDate>
      
      <guid>https://example.com/post/old/programming/2018-06-10-localdate/</guid>
      <description>After learning the hard truth that C# does not come with a date only type and DateTime contains both the date and time, I started the journey to find the best library that fills the gap. I experimented with NodaTime library&amp;rsquo;s LocalDate class but I found it difficult to use for very basic stuff like ToString formatting and parsing given string and an optional pattern. Hence I decided to write my own (repo url with nuget package too).</description>
    </item>
    
    <item>
      <title>Dynamic-map C# library</title>
      <link>https://example.com/post/old/programming/2018-06-05-dynamic-map/</link>
      <pubDate>Tue, 05 Jun 2018 23:16:11 -0600</pubDate>
      
      <guid>https://example.com/post/old/programming/2018-06-05-dynamic-map/</guid>
      <description>I searched for hours for a library similar to AutoMapper but to map an object to a Type. In other words, instead of Map&amp;lt;TSource, TDestination&amp;gt;(obj), having something like this: Map(typeof(TDestination), obj). I even had an idea to use Activator.CreateInstance() to dynamically run the generic method call of Map&amp;lt;TSource, TDestination&amp;gt;(obj) to substitute the static generic type but I realized AutoMapper also needs a mapping profile. Writing that would be complicated &amp;hellip; really complicated.</description>
    </item>
    
  </channel>
</rss>
